{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Developing an AI application\n",
    "\n",
    "Going forward, AI algorithms will be incorporated into more and more everyday applications. For example, you might want to include an image classifier in a smart phone app. To do this, you'd use a deep learning model trained on hundreds of thousands of images as part of the overall application architecture. A large part of software development in the future will be using these types of models as common parts of applications. \n",
    "\n",
    "In this project, you'll train an image classifier to recognize different species of flowers. You can imagine using something like this in a phone app that tells you the name of the flower your camera is looking at. In practice you'd train this classifier, then export it for use in your application. We'll be using [this dataset](http://www.robots.ox.ac.uk/~vgg/data/flowers/102/index.html) of 102 flower categories, you can see a few examples below. \n",
    "\n",
    "<img src='assets/Flowers.png' width=500px>\n",
    "\n",
    "The project is broken down into multiple steps:\n",
    "\n",
    "* Load and preprocess the image dataset\n",
    "* Train the image classifier on your dataset\n",
    "* Use the trained classifier to predict image content\n",
    "\n",
    "We'll lead you through each part which you'll implement in Python.\n",
    "\n",
    "When you've completed this project, you'll have an application that can be trained on any set of labeled images. Here your network will be learning about flowers and end up as a command line application. But, what you do with your new skills depends on your imagination and effort in building a dataset. For example, imagine an app where you take a picture of a car, it tells you what the make and model is, then looks up information about it. Go build your own dataset and make something new.\n",
    "\n",
    "First up is importing the packages you'll need. It's good practice to keep all the imports at the beginning of your code. As you work through this notebook and find you need to import a package, make sure to add the import up here."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "%matplotlib inline\n",
    "%config InlineBackend.figure_format = 'retina'\n",
    "\n",
    "import matplotlib.pyplot as plt\n",
    "import numpy as np\n",
    "import torch\n",
    "from torch import nn, optim\n",
    "from torchvision import datasets, transforms, models\n",
    "from collections import OrderedDict\n",
    "from PIL import Image"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Load the data\n",
    "\n",
    "Here you'll use `torchvision` to load the data ([documentation](http://pytorch.org/docs/0.3.0/torchvision/index.html)). The data should be included alongside this notebook, otherwise you can [download it here](https://s3.amazonaws.com/content.udacity-data.com/nd089/flower_data.tar.gz). The dataset is split into three parts, training, validation, and testing. For the training, you'll want to apply transformations such as random scaling, cropping, and flipping. This will help the network generalize leading to better performance. You'll also need to make sure the input data is resized to 224x224 pixels as required by the pre-trained networks.\n",
    "\n",
    "The validation and testing sets are used to measure the model's performance on data it hasn't seen yet. For this you don't want any scaling or rotation transformations, but you'll need to resize then crop the images to the appropriate size.\n",
    "\n",
    "The pre-trained networks you'll use were trained on the ImageNet dataset where each color channel was normalized separately. For all three sets you'll need to normalize the means and standard deviations of the images to what the network expects. For the means, it's `[0.485, 0.456, 0.406]` and for the standard deviations `[0.229, 0.224, 0.225]`, calculated from the ImageNet images.  These values will shift each color channel to be centered at 0 and range from -1 to 1.\n",
    " "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "data_dir = 'flowers'\n",
    "train_dir = data_dir + '/train'\n",
    "valid_dir = data_dir + '/valid'\n",
    "test_dir = data_dir + '/test'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "# TODO: Define your transforms for the training, validation, and testing sets\n",
    "data_transforms = transforms.Compose([transforms.Resize(256),\n",
    "                                      transforms.CenterCrop(224),\n",
    "                                      transforms.ToTensor(),\n",
    "                                      transforms.Normalize([0.485, 0.456, 0.406], \n",
    "                                                           [0.229, 0.224, 0.225])])\n",
    "\n",
    "train_transform = transforms.Compose([transforms.RandomRotation(30),\n",
    "                                     transforms.RandomHorizontalFlip(),\n",
    "                                     transforms.Resize(256),\n",
    "                                     transforms.CenterCrop(224),\n",
    "                                     transforms.ToTensor(),\n",
    "                                     transforms.Normalize([0.485, 0.456, 0.406], \n",
    "                                                          [0.229, 0.224, 0.225])])\n",
    "\n",
    "# TODO: Load the datasets with ImageFolder\n",
    "train_data = datasets.ImageFolder(train_dir, transform=train_transform)\n",
    "valid_data = datasets.ImageFolder(valid_dir, transform=data_transforms)\n",
    "test_data = datasets.ImageFolder(test_dir, transform=data_transforms)\n",
    "\n",
    "# TODO: Using the image datasets and the trainforms, define the dataloaders\n",
    "trainloader = torch.utils.data.DataLoader(train_data, batch_size=64, shuffle=True)\n",
    "validloader = torch.utils.data.DataLoader(valid_data, batch_size=32)\n",
    "testloader = torch.utils.data.DataLoader(test_data, batch_size=32)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Label mapping\n",
    "\n",
    "You'll also need to load in a mapping from category label to category name. You can find this in the file `cat_to_name.json`. It's a JSON object which you can read in with the [`json` module](https://docs.python.org/2/library/json.html). This will give you a dictionary mapping the integer encoded categories to the actual names of the flowers."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "102"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import json\n",
    "\n",
    "with open('cat_to_name.json', 'r') as f:\n",
    "    cat_to_name = json.load(f)\n",
    "\n",
    "len(cat_to_name.keys())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Building and training the classifier\n",
    "\n",
    "Now that the data is ready, it's time to build and train the classifier. As usual, you should use one of the pretrained models from `torchvision.models` to get the image features. Build and train a new feed-forward classifier using those features.\n",
    "\n",
    "We're going to leave this part up to you. Refer to [the rubric](https://review.udacity.com/#!/rubrics/1663/view) for guidance on successfully completing this section. Things you'll need to do:\n",
    "\n",
    "* Load a [pre-trained network](http://pytorch.org/docs/master/torchvision/models.html) (If you need a starting point, the VGG networks work great and are straightforward to use)\n",
    "* Define a new, untrained feed-forward network as a classifier, using ReLU activations and dropout\n",
    "* Train the classifier layers using backpropagation using the pre-trained network to get the features\n",
    "* Track the loss and accuracy on the validation set to determine the best hyperparameters\n",
    "\n",
    "We've left a cell open for you below, but use as many as you need. Our advice is to break the problem up into smaller parts you can run separately. Check that each part is doing what you expect, then move on to the next. You'll likely find that as you work through each part, you'll need to go back and modify your previous code. This is totally normal!\n",
    "\n",
    "When training make sure you're updating only the weights of the feed-forward network. You should be able to get the validation accuracy above 70% if you build everything right. Make sure to try different hyperparameters (learning rate, units in the classifier, epochs, etc) to find the best model. Save those hyperparameters to use as default values in the next part of the project.\n",
    "\n",
    "One last important tip if you're using the workspace to run your code: To avoid having your workspace disconnect during the long-running tasks in this notebook, please read in the earlier page in this lesson called Intro to\n",
    "GPU Workspaces about Keeping Your Session Active. You'll want to include code from the workspace_utils.py module.\n",
    "\n",
    "**Note for Workspace users:** If your network is over 1 GB when saved as a checkpoint, there might be issues with saving backups in your workspace. Typically this happens with wide dense layers after the convolutional layers. If your saved checkpoint is larger than 1 GB (you can open a terminal and check with `ls -lh`), you should reduce the size of your hidden layers and train again."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/conda/lib/python3.6/site-packages/torchvision-0.2.1-py3.6.egg/torchvision/models/densenet.py:212: UserWarning: nn.init.kaiming_normal is now deprecated in favor of nn.init.kaiming_normal_.\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "DenseNet(\n",
       "  (features): Sequential(\n",
       "    (conv0): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)\n",
       "    (norm0): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "    (relu0): ReLU(inplace)\n",
       "    (pool0): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)\n",
       "    (denseblock1): _DenseBlock(\n",
       "      (denselayer1): _DenseLayer(\n",
       "        (norm1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu1): ReLU(inplace)\n",
       "        (conv1): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu2): ReLU(inplace)\n",
       "        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
       "      )\n",
       "      (denselayer2): _DenseLayer(\n",
       "        (norm1): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu1): ReLU(inplace)\n",
       "        (conv1): Conv2d(96, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu2): ReLU(inplace)\n",
       "        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
       "      )\n",
       "      (denselayer3): _DenseLayer(\n",
       "        (norm1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu1): ReLU(inplace)\n",
       "        (conv1): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu2): ReLU(inplace)\n",
       "        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
       "      )\n",
       "      (denselayer4): _DenseLayer(\n",
       "        (norm1): BatchNorm2d(160, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu1): ReLU(inplace)\n",
       "        (conv1): Conv2d(160, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu2): ReLU(inplace)\n",
       "        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
       "      )\n",
       "      (denselayer5): _DenseLayer(\n",
       "        (norm1): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu1): ReLU(inplace)\n",
       "        (conv1): Conv2d(192, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu2): ReLU(inplace)\n",
       "        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
       "      )\n",
       "      (denselayer6): _DenseLayer(\n",
       "        (norm1): BatchNorm2d(224, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu1): ReLU(inplace)\n",
       "        (conv1): Conv2d(224, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu2): ReLU(inplace)\n",
       "        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
       "      )\n",
       "    )\n",
       "    (transition1): _Transition(\n",
       "      (norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "      (relu): ReLU(inplace)\n",
       "      (conv): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "      (pool): AvgPool2d(kernel_size=2, stride=2, padding=0)\n",
       "    )\n",
       "    (denseblock2): _DenseBlock(\n",
       "      (denselayer1): _DenseLayer(\n",
       "        (norm1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu1): ReLU(inplace)\n",
       "        (conv1): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu2): ReLU(inplace)\n",
       "        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
       "      )\n",
       "      (denselayer2): _DenseLayer(\n",
       "        (norm1): BatchNorm2d(160, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu1): ReLU(inplace)\n",
       "        (conv1): Conv2d(160, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu2): ReLU(inplace)\n",
       "        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
       "      )\n",
       "      (denselayer3): _DenseLayer(\n",
       "        (norm1): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu1): ReLU(inplace)\n",
       "        (conv1): Conv2d(192, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu2): ReLU(inplace)\n",
       "        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
       "      )\n",
       "      (denselayer4): _DenseLayer(\n",
       "        (norm1): BatchNorm2d(224, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu1): ReLU(inplace)\n",
       "        (conv1): Conv2d(224, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu2): ReLU(inplace)\n",
       "        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
       "      )\n",
       "      (denselayer5): _DenseLayer(\n",
       "        (norm1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu1): ReLU(inplace)\n",
       "        (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu2): ReLU(inplace)\n",
       "        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
       "      )\n",
       "      (denselayer6): _DenseLayer(\n",
       "        (norm1): BatchNorm2d(288, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu1): ReLU(inplace)\n",
       "        (conv1): Conv2d(288, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu2): ReLU(inplace)\n",
       "        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
       "      )\n",
       "      (denselayer7): _DenseLayer(\n",
       "        (norm1): BatchNorm2d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu1): ReLU(inplace)\n",
       "        (conv1): Conv2d(320, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu2): ReLU(inplace)\n",
       "        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
       "      )\n",
       "      (denselayer8): _DenseLayer(\n",
       "        (norm1): BatchNorm2d(352, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu1): ReLU(inplace)\n",
       "        (conv1): Conv2d(352, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu2): ReLU(inplace)\n",
       "        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
       "      )\n",
       "      (denselayer9): _DenseLayer(\n",
       "        (norm1): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu1): ReLU(inplace)\n",
       "        (conv1): Conv2d(384, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu2): ReLU(inplace)\n",
       "        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
       "      )\n",
       "      (denselayer10): _DenseLayer(\n",
       "        (norm1): BatchNorm2d(416, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu1): ReLU(inplace)\n",
       "        (conv1): Conv2d(416, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu2): ReLU(inplace)\n",
       "        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
       "      )\n",
       "      (denselayer11): _DenseLayer(\n",
       "        (norm1): BatchNorm2d(448, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu1): ReLU(inplace)\n",
       "        (conv1): Conv2d(448, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu2): ReLU(inplace)\n",
       "        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
       "      )\n",
       "      (denselayer12): _DenseLayer(\n",
       "        (norm1): BatchNorm2d(480, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu1): ReLU(inplace)\n",
       "        (conv1): Conv2d(480, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu2): ReLU(inplace)\n",
       "        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
       "      )\n",
       "    )\n",
       "    (transition2): _Transition(\n",
       "      (norm): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "      (relu): ReLU(inplace)\n",
       "      (conv): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "      (pool): AvgPool2d(kernel_size=2, stride=2, padding=0)\n",
       "    )\n",
       "    (denseblock3): _DenseBlock(\n",
       "      (denselayer1): _DenseLayer(\n",
       "        (norm1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu1): ReLU(inplace)\n",
       "        (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu2): ReLU(inplace)\n",
       "        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
       "      )\n",
       "      (denselayer2): _DenseLayer(\n",
       "        (norm1): BatchNorm2d(288, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu1): ReLU(inplace)\n",
       "        (conv1): Conv2d(288, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu2): ReLU(inplace)\n",
       "        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
       "      )\n",
       "      (denselayer3): _DenseLayer(\n",
       "        (norm1): BatchNorm2d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu1): ReLU(inplace)\n",
       "        (conv1): Conv2d(320, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu2): ReLU(inplace)\n",
       "        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
       "      )\n",
       "      (denselayer4): _DenseLayer(\n",
       "        (norm1): BatchNorm2d(352, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu1): ReLU(inplace)\n",
       "        (conv1): Conv2d(352, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu2): ReLU(inplace)\n",
       "        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
       "      )\n",
       "      (denselayer5): _DenseLayer(\n",
       "        (norm1): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu1): ReLU(inplace)\n",
       "        (conv1): Conv2d(384, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu2): ReLU(inplace)\n",
       "        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
       "      )\n",
       "      (denselayer6): _DenseLayer(\n",
       "        (norm1): BatchNorm2d(416, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu1): ReLU(inplace)\n",
       "        (conv1): Conv2d(416, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu2): ReLU(inplace)\n",
       "        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
       "      )\n",
       "      (denselayer7): _DenseLayer(\n",
       "        (norm1): BatchNorm2d(448, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu1): ReLU(inplace)\n",
       "        (conv1): Conv2d(448, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu2): ReLU(inplace)\n",
       "        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
       "      )\n",
       "      (denselayer8): _DenseLayer(\n",
       "        (norm1): BatchNorm2d(480, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu1): ReLU(inplace)\n",
       "        (conv1): Conv2d(480, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu2): ReLU(inplace)\n",
       "        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
       "      )\n",
       "      (denselayer9): _DenseLayer(\n",
       "        (norm1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu1): ReLU(inplace)\n",
       "        (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu2): ReLU(inplace)\n",
       "        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
       "      )\n",
       "      (denselayer10): _DenseLayer(\n",
       "        (norm1): BatchNorm2d(544, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu1): ReLU(inplace)\n",
       "        (conv1): Conv2d(544, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu2): ReLU(inplace)\n",
       "        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
       "      )\n",
       "      (denselayer11): _DenseLayer(\n",
       "        (norm1): BatchNorm2d(576, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu1): ReLU(inplace)\n",
       "        (conv1): Conv2d(576, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu2): ReLU(inplace)\n",
       "        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
       "      )\n",
       "      (denselayer12): _DenseLayer(\n",
       "        (norm1): BatchNorm2d(608, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu1): ReLU(inplace)\n",
       "        (conv1): Conv2d(608, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu2): ReLU(inplace)\n",
       "        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
       "      )\n",
       "      (denselayer13): _DenseLayer(\n",
       "        (norm1): BatchNorm2d(640, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu1): ReLU(inplace)\n",
       "        (conv1): Conv2d(640, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu2): ReLU(inplace)\n",
       "        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
       "      )\n",
       "      (denselayer14): _DenseLayer(\n",
       "        (norm1): BatchNorm2d(672, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu1): ReLU(inplace)\n",
       "        (conv1): Conv2d(672, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu2): ReLU(inplace)\n",
       "        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
       "      )\n",
       "      (denselayer15): _DenseLayer(\n",
       "        (norm1): BatchNorm2d(704, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu1): ReLU(inplace)\n",
       "        (conv1): Conv2d(704, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu2): ReLU(inplace)\n",
       "        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
       "      )\n",
       "      (denselayer16): _DenseLayer(\n",
       "        (norm1): BatchNorm2d(736, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu1): ReLU(inplace)\n",
       "        (conv1): Conv2d(736, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu2): ReLU(inplace)\n",
       "        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
       "      )\n",
       "      (denselayer17): _DenseLayer(\n",
       "        (norm1): BatchNorm2d(768, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu1): ReLU(inplace)\n",
       "        (conv1): Conv2d(768, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu2): ReLU(inplace)\n",
       "        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
       "      )\n",
       "      (denselayer18): _DenseLayer(\n",
       "        (norm1): BatchNorm2d(800, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu1): ReLU(inplace)\n",
       "        (conv1): Conv2d(800, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu2): ReLU(inplace)\n",
       "        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
       "      )\n",
       "      (denselayer19): _DenseLayer(\n",
       "        (norm1): BatchNorm2d(832, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu1): ReLU(inplace)\n",
       "        (conv1): Conv2d(832, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu2): ReLU(inplace)\n",
       "        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
       "      )\n",
       "      (denselayer20): _DenseLayer(\n",
       "        (norm1): BatchNorm2d(864, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu1): ReLU(inplace)\n",
       "        (conv1): Conv2d(864, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu2): ReLU(inplace)\n",
       "        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
       "      )\n",
       "      (denselayer21): _DenseLayer(\n",
       "        (norm1): BatchNorm2d(896, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu1): ReLU(inplace)\n",
       "        (conv1): Conv2d(896, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu2): ReLU(inplace)\n",
       "        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
       "      )\n",
       "      (denselayer22): _DenseLayer(\n",
       "        (norm1): BatchNorm2d(928, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu1): ReLU(inplace)\n",
       "        (conv1): Conv2d(928, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu2): ReLU(inplace)\n",
       "        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
       "      )\n",
       "      (denselayer23): _DenseLayer(\n",
       "        (norm1): BatchNorm2d(960, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu1): ReLU(inplace)\n",
       "        (conv1): Conv2d(960, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu2): ReLU(inplace)\n",
       "        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
       "      )\n",
       "      (denselayer24): _DenseLayer(\n",
       "        (norm1): BatchNorm2d(992, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu1): ReLU(inplace)\n",
       "        (conv1): Conv2d(992, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu2): ReLU(inplace)\n",
       "        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
       "      )\n",
       "    )\n",
       "    (transition3): _Transition(\n",
       "      (norm): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "      (relu): ReLU(inplace)\n",
       "      (conv): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "      (pool): AvgPool2d(kernel_size=2, stride=2, padding=0)\n",
       "    )\n",
       "    (denseblock4): _DenseBlock(\n",
       "      (denselayer1): _DenseLayer(\n",
       "        (norm1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu1): ReLU(inplace)\n",
       "        (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu2): ReLU(inplace)\n",
       "        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
       "      )\n",
       "      (denselayer2): _DenseLayer(\n",
       "        (norm1): BatchNorm2d(544, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu1): ReLU(inplace)\n",
       "        (conv1): Conv2d(544, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu2): ReLU(inplace)\n",
       "        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
       "      )\n",
       "      (denselayer3): _DenseLayer(\n",
       "        (norm1): BatchNorm2d(576, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu1): ReLU(inplace)\n",
       "        (conv1): Conv2d(576, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu2): ReLU(inplace)\n",
       "        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
       "      )\n",
       "      (denselayer4): _DenseLayer(\n",
       "        (norm1): BatchNorm2d(608, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu1): ReLU(inplace)\n",
       "        (conv1): Conv2d(608, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu2): ReLU(inplace)\n",
       "        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
       "      )\n",
       "      (denselayer5): _DenseLayer(\n",
       "        (norm1): BatchNorm2d(640, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu1): ReLU(inplace)\n",
       "        (conv1): Conv2d(640, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu2): ReLU(inplace)\n",
       "        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
       "      )\n",
       "      (denselayer6): _DenseLayer(\n",
       "        (norm1): BatchNorm2d(672, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu1): ReLU(inplace)\n",
       "        (conv1): Conv2d(672, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu2): ReLU(inplace)\n",
       "        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
       "      )\n",
       "      (denselayer7): _DenseLayer(\n",
       "        (norm1): BatchNorm2d(704, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu1): ReLU(inplace)\n",
       "        (conv1): Conv2d(704, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu2): ReLU(inplace)\n",
       "        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
       "      )\n",
       "      (denselayer8): _DenseLayer(\n",
       "        (norm1): BatchNorm2d(736, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu1): ReLU(inplace)\n",
       "        (conv1): Conv2d(736, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu2): ReLU(inplace)\n",
       "        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
       "      )\n",
       "      (denselayer9): _DenseLayer(\n",
       "        (norm1): BatchNorm2d(768, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu1): ReLU(inplace)\n",
       "        (conv1): Conv2d(768, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu2): ReLU(inplace)\n",
       "        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
       "      )\n",
       "      (denselayer10): _DenseLayer(\n",
       "        (norm1): BatchNorm2d(800, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu1): ReLU(inplace)\n",
       "        (conv1): Conv2d(800, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu2): ReLU(inplace)\n",
       "        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
       "      )\n",
       "      (denselayer11): _DenseLayer(\n",
       "        (norm1): BatchNorm2d(832, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu1): ReLU(inplace)\n",
       "        (conv1): Conv2d(832, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu2): ReLU(inplace)\n",
       "        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
       "      )\n",
       "      (denselayer12): _DenseLayer(\n",
       "        (norm1): BatchNorm2d(864, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu1): ReLU(inplace)\n",
       "        (conv1): Conv2d(864, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu2): ReLU(inplace)\n",
       "        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
       "      )\n",
       "      (denselayer13): _DenseLayer(\n",
       "        (norm1): BatchNorm2d(896, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu1): ReLU(inplace)\n",
       "        (conv1): Conv2d(896, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu2): ReLU(inplace)\n",
       "        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
       "      )\n",
       "      (denselayer14): _DenseLayer(\n",
       "        (norm1): BatchNorm2d(928, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu1): ReLU(inplace)\n",
       "        (conv1): Conv2d(928, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu2): ReLU(inplace)\n",
       "        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
       "      )\n",
       "      (denselayer15): _DenseLayer(\n",
       "        (norm1): BatchNorm2d(960, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu1): ReLU(inplace)\n",
       "        (conv1): Conv2d(960, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu2): ReLU(inplace)\n",
       "        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
       "      )\n",
       "      (denselayer16): _DenseLayer(\n",
       "        (norm1): BatchNorm2d(992, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu1): ReLU(inplace)\n",
       "        (conv1): Conv2d(992, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu2): ReLU(inplace)\n",
       "        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
       "      )\n",
       "    )\n",
       "    (norm5): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "  )\n",
       "  (classifier): Linear(in_features=1024, out_features=1000, bias=True)\n",
       ")"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model = models.densenet121(pretrained=True)\n",
    "model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "DenseNet(\n",
       "  (features): Sequential(\n",
       "    (conv0): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)\n",
       "    (norm0): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "    (relu0): ReLU(inplace)\n",
       "    (pool0): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)\n",
       "    (denseblock1): _DenseBlock(\n",
       "      (denselayer1): _DenseLayer(\n",
       "        (norm1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu1): ReLU(inplace)\n",
       "        (conv1): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu2): ReLU(inplace)\n",
       "        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
       "      )\n",
       "      (denselayer2): _DenseLayer(\n",
       "        (norm1): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu1): ReLU(inplace)\n",
       "        (conv1): Conv2d(96, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu2): ReLU(inplace)\n",
       "        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
       "      )\n",
       "      (denselayer3): _DenseLayer(\n",
       "        (norm1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu1): ReLU(inplace)\n",
       "        (conv1): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu2): ReLU(inplace)\n",
       "        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
       "      )\n",
       "      (denselayer4): _DenseLayer(\n",
       "        (norm1): BatchNorm2d(160, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu1): ReLU(inplace)\n",
       "        (conv1): Conv2d(160, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu2): ReLU(inplace)\n",
       "        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
       "      )\n",
       "      (denselayer5): _DenseLayer(\n",
       "        (norm1): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu1): ReLU(inplace)\n",
       "        (conv1): Conv2d(192, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu2): ReLU(inplace)\n",
       "        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
       "      )\n",
       "      (denselayer6): _DenseLayer(\n",
       "        (norm1): BatchNorm2d(224, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu1): ReLU(inplace)\n",
       "        (conv1): Conv2d(224, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu2): ReLU(inplace)\n",
       "        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
       "      )\n",
       "    )\n",
       "    (transition1): _Transition(\n",
       "      (norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "      (relu): ReLU(inplace)\n",
       "      (conv): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "      (pool): AvgPool2d(kernel_size=2, stride=2, padding=0)\n",
       "    )\n",
       "    (denseblock2): _DenseBlock(\n",
       "      (denselayer1): _DenseLayer(\n",
       "        (norm1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu1): ReLU(inplace)\n",
       "        (conv1): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu2): ReLU(inplace)\n",
       "        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
       "      )\n",
       "      (denselayer2): _DenseLayer(\n",
       "        (norm1): BatchNorm2d(160, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu1): ReLU(inplace)\n",
       "        (conv1): Conv2d(160, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu2): ReLU(inplace)\n",
       "        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
       "      )\n",
       "      (denselayer3): _DenseLayer(\n",
       "        (norm1): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu1): ReLU(inplace)\n",
       "        (conv1): Conv2d(192, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu2): ReLU(inplace)\n",
       "        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
       "      )\n",
       "      (denselayer4): _DenseLayer(\n",
       "        (norm1): BatchNorm2d(224, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu1): ReLU(inplace)\n",
       "        (conv1): Conv2d(224, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu2): ReLU(inplace)\n",
       "        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
       "      )\n",
       "      (denselayer5): _DenseLayer(\n",
       "        (norm1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu1): ReLU(inplace)\n",
       "        (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu2): ReLU(inplace)\n",
       "        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
       "      )\n",
       "      (denselayer6): _DenseLayer(\n",
       "        (norm1): BatchNorm2d(288, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu1): ReLU(inplace)\n",
       "        (conv1): Conv2d(288, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu2): ReLU(inplace)\n",
       "        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
       "      )\n",
       "      (denselayer7): _DenseLayer(\n",
       "        (norm1): BatchNorm2d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu1): ReLU(inplace)\n",
       "        (conv1): Conv2d(320, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu2): ReLU(inplace)\n",
       "        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
       "      )\n",
       "      (denselayer8): _DenseLayer(\n",
       "        (norm1): BatchNorm2d(352, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu1): ReLU(inplace)\n",
       "        (conv1): Conv2d(352, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu2): ReLU(inplace)\n",
       "        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
       "      )\n",
       "      (denselayer9): _DenseLayer(\n",
       "        (norm1): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu1): ReLU(inplace)\n",
       "        (conv1): Conv2d(384, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu2): ReLU(inplace)\n",
       "        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
       "      )\n",
       "      (denselayer10): _DenseLayer(\n",
       "        (norm1): BatchNorm2d(416, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu1): ReLU(inplace)\n",
       "        (conv1): Conv2d(416, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu2): ReLU(inplace)\n",
       "        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
       "      )\n",
       "      (denselayer11): _DenseLayer(\n",
       "        (norm1): BatchNorm2d(448, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu1): ReLU(inplace)\n",
       "        (conv1): Conv2d(448, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu2): ReLU(inplace)\n",
       "        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
       "      )\n",
       "      (denselayer12): _DenseLayer(\n",
       "        (norm1): BatchNorm2d(480, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu1): ReLU(inplace)\n",
       "        (conv1): Conv2d(480, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu2): ReLU(inplace)\n",
       "        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
       "      )\n",
       "    )\n",
       "    (transition2): _Transition(\n",
       "      (norm): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "      (relu): ReLU(inplace)\n",
       "      (conv): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "      (pool): AvgPool2d(kernel_size=2, stride=2, padding=0)\n",
       "    )\n",
       "    (denseblock3): _DenseBlock(\n",
       "      (denselayer1): _DenseLayer(\n",
       "        (norm1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu1): ReLU(inplace)\n",
       "        (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu2): ReLU(inplace)\n",
       "        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
       "      )\n",
       "      (denselayer2): _DenseLayer(\n",
       "        (norm1): BatchNorm2d(288, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu1): ReLU(inplace)\n",
       "        (conv1): Conv2d(288, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu2): ReLU(inplace)\n",
       "        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
       "      )\n",
       "      (denselayer3): _DenseLayer(\n",
       "        (norm1): BatchNorm2d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu1): ReLU(inplace)\n",
       "        (conv1): Conv2d(320, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu2): ReLU(inplace)\n",
       "        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
       "      )\n",
       "      (denselayer4): _DenseLayer(\n",
       "        (norm1): BatchNorm2d(352, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu1): ReLU(inplace)\n",
       "        (conv1): Conv2d(352, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu2): ReLU(inplace)\n",
       "        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
       "      )\n",
       "      (denselayer5): _DenseLayer(\n",
       "        (norm1): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu1): ReLU(inplace)\n",
       "        (conv1): Conv2d(384, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu2): ReLU(inplace)\n",
       "        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
       "      )\n",
       "      (denselayer6): _DenseLayer(\n",
       "        (norm1): BatchNorm2d(416, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu1): ReLU(inplace)\n",
       "        (conv1): Conv2d(416, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu2): ReLU(inplace)\n",
       "        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
       "      )\n",
       "      (denselayer7): _DenseLayer(\n",
       "        (norm1): BatchNorm2d(448, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu1): ReLU(inplace)\n",
       "        (conv1): Conv2d(448, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu2): ReLU(inplace)\n",
       "        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
       "      )\n",
       "      (denselayer8): _DenseLayer(\n",
       "        (norm1): BatchNorm2d(480, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu1): ReLU(inplace)\n",
       "        (conv1): Conv2d(480, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu2): ReLU(inplace)\n",
       "        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
       "      )\n",
       "      (denselayer9): _DenseLayer(\n",
       "        (norm1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu1): ReLU(inplace)\n",
       "        (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu2): ReLU(inplace)\n",
       "        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
       "      )\n",
       "      (denselayer10): _DenseLayer(\n",
       "        (norm1): BatchNorm2d(544, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu1): ReLU(inplace)\n",
       "        (conv1): Conv2d(544, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu2): ReLU(inplace)\n",
       "        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
       "      )\n",
       "      (denselayer11): _DenseLayer(\n",
       "        (norm1): BatchNorm2d(576, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu1): ReLU(inplace)\n",
       "        (conv1): Conv2d(576, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu2): ReLU(inplace)\n",
       "        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
       "      )\n",
       "      (denselayer12): _DenseLayer(\n",
       "        (norm1): BatchNorm2d(608, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu1): ReLU(inplace)\n",
       "        (conv1): Conv2d(608, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu2): ReLU(inplace)\n",
       "        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
       "      )\n",
       "      (denselayer13): _DenseLayer(\n",
       "        (norm1): BatchNorm2d(640, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu1): ReLU(inplace)\n",
       "        (conv1): Conv2d(640, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu2): ReLU(inplace)\n",
       "        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
       "      )\n",
       "      (denselayer14): _DenseLayer(\n",
       "        (norm1): BatchNorm2d(672, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu1): ReLU(inplace)\n",
       "        (conv1): Conv2d(672, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu2): ReLU(inplace)\n",
       "        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
       "      )\n",
       "      (denselayer15): _DenseLayer(\n",
       "        (norm1): BatchNorm2d(704, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu1): ReLU(inplace)\n",
       "        (conv1): Conv2d(704, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu2): ReLU(inplace)\n",
       "        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
       "      )\n",
       "      (denselayer16): _DenseLayer(\n",
       "        (norm1): BatchNorm2d(736, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu1): ReLU(inplace)\n",
       "        (conv1): Conv2d(736, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu2): ReLU(inplace)\n",
       "        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
       "      )\n",
       "      (denselayer17): _DenseLayer(\n",
       "        (norm1): BatchNorm2d(768, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu1): ReLU(inplace)\n",
       "        (conv1): Conv2d(768, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu2): ReLU(inplace)\n",
       "        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
       "      )\n",
       "      (denselayer18): _DenseLayer(\n",
       "        (norm1): BatchNorm2d(800, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu1): ReLU(inplace)\n",
       "        (conv1): Conv2d(800, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu2): ReLU(inplace)\n",
       "        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
       "      )\n",
       "      (denselayer19): _DenseLayer(\n",
       "        (norm1): BatchNorm2d(832, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu1): ReLU(inplace)\n",
       "        (conv1): Conv2d(832, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu2): ReLU(inplace)\n",
       "        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
       "      )\n",
       "      (denselayer20): _DenseLayer(\n",
       "        (norm1): BatchNorm2d(864, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu1): ReLU(inplace)\n",
       "        (conv1): Conv2d(864, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu2): ReLU(inplace)\n",
       "        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
       "      )\n",
       "      (denselayer21): _DenseLayer(\n",
       "        (norm1): BatchNorm2d(896, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu1): ReLU(inplace)\n",
       "        (conv1): Conv2d(896, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu2): ReLU(inplace)\n",
       "        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
       "      )\n",
       "      (denselayer22): _DenseLayer(\n",
       "        (norm1): BatchNorm2d(928, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu1): ReLU(inplace)\n",
       "        (conv1): Conv2d(928, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu2): ReLU(inplace)\n",
       "        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
       "      )\n",
       "      (denselayer23): _DenseLayer(\n",
       "        (norm1): BatchNorm2d(960, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu1): ReLU(inplace)\n",
       "        (conv1): Conv2d(960, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu2): ReLU(inplace)\n",
       "        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
       "      )\n",
       "      (denselayer24): _DenseLayer(\n",
       "        (norm1): BatchNorm2d(992, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu1): ReLU(inplace)\n",
       "        (conv1): Conv2d(992, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu2): ReLU(inplace)\n",
       "        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
       "      )\n",
       "    )\n",
       "    (transition3): _Transition(\n",
       "      (norm): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "      (relu): ReLU(inplace)\n",
       "      (conv): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "      (pool): AvgPool2d(kernel_size=2, stride=2, padding=0)\n",
       "    )\n",
       "    (denseblock4): _DenseBlock(\n",
       "      (denselayer1): _DenseLayer(\n",
       "        (norm1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu1): ReLU(inplace)\n",
       "        (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu2): ReLU(inplace)\n",
       "        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
       "      )\n",
       "      (denselayer2): _DenseLayer(\n",
       "        (norm1): BatchNorm2d(544, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu1): ReLU(inplace)\n",
       "        (conv1): Conv2d(544, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu2): ReLU(inplace)\n",
       "        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
       "      )\n",
       "      (denselayer3): _DenseLayer(\n",
       "        (norm1): BatchNorm2d(576, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu1): ReLU(inplace)\n",
       "        (conv1): Conv2d(576, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu2): ReLU(inplace)\n",
       "        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
       "      )\n",
       "      (denselayer4): _DenseLayer(\n",
       "        (norm1): BatchNorm2d(608, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu1): ReLU(inplace)\n",
       "        (conv1): Conv2d(608, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu2): ReLU(inplace)\n",
       "        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
       "      )\n",
       "      (denselayer5): _DenseLayer(\n",
       "        (norm1): BatchNorm2d(640, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu1): ReLU(inplace)\n",
       "        (conv1): Conv2d(640, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu2): ReLU(inplace)\n",
       "        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
       "      )\n",
       "      (denselayer6): _DenseLayer(\n",
       "        (norm1): BatchNorm2d(672, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu1): ReLU(inplace)\n",
       "        (conv1): Conv2d(672, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu2): ReLU(inplace)\n",
       "        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
       "      )\n",
       "      (denselayer7): _DenseLayer(\n",
       "        (norm1): BatchNorm2d(704, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu1): ReLU(inplace)\n",
       "        (conv1): Conv2d(704, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu2): ReLU(inplace)\n",
       "        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
       "      )\n",
       "      (denselayer8): _DenseLayer(\n",
       "        (norm1): BatchNorm2d(736, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu1): ReLU(inplace)\n",
       "        (conv1): Conv2d(736, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu2): ReLU(inplace)\n",
       "        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
       "      )\n",
       "      (denselayer9): _DenseLayer(\n",
       "        (norm1): BatchNorm2d(768, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu1): ReLU(inplace)\n",
       "        (conv1): Conv2d(768, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu2): ReLU(inplace)\n",
       "        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
       "      )\n",
       "      (denselayer10): _DenseLayer(\n",
       "        (norm1): BatchNorm2d(800, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu1): ReLU(inplace)\n",
       "        (conv1): Conv2d(800, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu2): ReLU(inplace)\n",
       "        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
       "      )\n",
       "      (denselayer11): _DenseLayer(\n",
       "        (norm1): BatchNorm2d(832, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu1): ReLU(inplace)\n",
       "        (conv1): Conv2d(832, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu2): ReLU(inplace)\n",
       "        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
       "      )\n",
       "      (denselayer12): _DenseLayer(\n",
       "        (norm1): BatchNorm2d(864, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu1): ReLU(inplace)\n",
       "        (conv1): Conv2d(864, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu2): ReLU(inplace)\n",
       "        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
       "      )\n",
       "      (denselayer13): _DenseLayer(\n",
       "        (norm1): BatchNorm2d(896, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu1): ReLU(inplace)\n",
       "        (conv1): Conv2d(896, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu2): ReLU(inplace)\n",
       "        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
       "      )\n",
       "      (denselayer14): _DenseLayer(\n",
       "        (norm1): BatchNorm2d(928, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu1): ReLU(inplace)\n",
       "        (conv1): Conv2d(928, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu2): ReLU(inplace)\n",
       "        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
       "      )\n",
       "      (denselayer15): _DenseLayer(\n",
       "        (norm1): BatchNorm2d(960, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu1): ReLU(inplace)\n",
       "        (conv1): Conv2d(960, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu2): ReLU(inplace)\n",
       "        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
       "      )\n",
       "      (denselayer16): _DenseLayer(\n",
       "        (norm1): BatchNorm2d(992, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu1): ReLU(inplace)\n",
       "        (conv1): Conv2d(992, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu2): ReLU(inplace)\n",
       "        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
       "      )\n",
       "    )\n",
       "    (norm5): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "  )\n",
       "  (classifier): Sequential(\n",
       "    (fc1): Linear(in_features=1024, out_features=512, bias=True)\n",
       "    (relu1): ReLU()\n",
       "    (dropout1): Dropout(p=0.2)\n",
       "    (fc2): Linear(in_features=512, out_features=256, bias=True)\n",
       "    (relu2): ReLU()\n",
       "    (dropout2): Dropout(p=0.2)\n",
       "    (fc3): Linear(in_features=256, out_features=102, bias=True)\n",
       "    (output): LogSoftmax()\n",
       "  )\n",
       ")"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "for param in model.parameters():\n",
    "    param.requires_grad = False\n",
    "\n",
    "classifier = nn.Sequential(OrderedDict([\n",
    "                            ('fc1', nn.Linear(1024, 512)),\n",
    "                            ('relu1', nn.ReLU()),\n",
    "                            ('dropout1', nn.Dropout(p=0.2)),\n",
    "                            ('fc2', nn.Linear(512, 256)),\n",
    "                            ('relu2', nn.ReLU()),\n",
    "                            ('dropout2', nn.Dropout(p=0.2)),\n",
    "                            ('fc3', nn.Linear(256, 102)),\n",
    "                            ('output', nn.LogSoftmax(dim=1))\n",
    "                            ]))\n",
    "\n",
    "model.classifier = classifier\n",
    "model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [],
   "source": [
    "criterion = nn.NLLLoss()\n",
    "optimizer = optim.Adam(model.classifier.parameters(), lr = 0.001)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "ename": "KeyboardInterrupt",
     "evalue": "",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-11-bf395b5c5f11>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     21\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     22\u001b[0m             \u001b[0;31m#Forward pass\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 23\u001b[0;31m             \u001b[0mlogprob\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mmodel\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mforward\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mimages\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     24\u001b[0m             \u001b[0mloss\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mcriterion\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mlogprob\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlabels\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     25\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/opt/conda/lib/python3.6/site-packages/torchvision-0.2.1-py3.6.egg/torchvision/models/densenet.py\u001b[0m in \u001b[0;36mforward\u001b[0;34m(self, x)\u001b[0m\n\u001b[1;32m    218\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    219\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mforward\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mx\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 220\u001b[0;31m         \u001b[0mfeatures\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfeatures\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    221\u001b[0m         \u001b[0mout\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mF\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mrelu\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfeatures\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0minplace\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mTrue\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    222\u001b[0m         \u001b[0mout\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mF\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mavg_pool2d\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mout\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mkernel_size\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m7\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mstride\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mview\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfeatures\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msize\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m-\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/opt/conda/lib/python3.6/site-packages/torch/nn/modules/module.py\u001b[0m in \u001b[0;36m__call__\u001b[0;34m(self, *input, **kwargs)\u001b[0m\n\u001b[1;32m    489\u001b[0m             \u001b[0mresult\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_slow_forward\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0minput\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    490\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 491\u001b[0;31m             \u001b[0mresult\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mforward\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0minput\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    492\u001b[0m         \u001b[0;32mfor\u001b[0m \u001b[0mhook\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_forward_hooks\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mvalues\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    493\u001b[0m             \u001b[0mhook_result\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mhook\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0minput\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mresult\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/opt/conda/lib/python3.6/site-packages/torch/nn/modules/container.py\u001b[0m in \u001b[0;36mforward\u001b[0;34m(self, input)\u001b[0m\n\u001b[1;32m     89\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mforward\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0minput\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     90\u001b[0m         \u001b[0;32mfor\u001b[0m \u001b[0mmodule\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_modules\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mvalues\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 91\u001b[0;31m             \u001b[0minput\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mmodule\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0minput\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     92\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0minput\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     93\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/opt/conda/lib/python3.6/site-packages/torch/nn/modules/module.py\u001b[0m in \u001b[0;36m__call__\u001b[0;34m(self, *input, **kwargs)\u001b[0m\n\u001b[1;32m    489\u001b[0m             \u001b[0mresult\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_slow_forward\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0minput\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    490\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 491\u001b[0;31m             \u001b[0mresult\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mforward\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0minput\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    492\u001b[0m         \u001b[0;32mfor\u001b[0m \u001b[0mhook\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_forward_hooks\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mvalues\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    493\u001b[0m             \u001b[0mhook_result\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mhook\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0minput\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mresult\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/opt/conda/lib/python3.6/site-packages/torch/nn/modules/container.py\u001b[0m in \u001b[0;36mforward\u001b[0;34m(self, input)\u001b[0m\n\u001b[1;32m     89\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mforward\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0minput\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     90\u001b[0m         \u001b[0;32mfor\u001b[0m \u001b[0mmodule\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_modules\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mvalues\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 91\u001b[0;31m             \u001b[0minput\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mmodule\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0minput\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     92\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0minput\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     93\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/opt/conda/lib/python3.6/site-packages/torch/nn/modules/module.py\u001b[0m in \u001b[0;36m__call__\u001b[0;34m(self, *input, **kwargs)\u001b[0m\n\u001b[1;32m    489\u001b[0m             \u001b[0mresult\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_slow_forward\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0minput\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    490\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 491\u001b[0;31m             \u001b[0mresult\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mforward\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0minput\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    492\u001b[0m         \u001b[0;32mfor\u001b[0m \u001b[0mhook\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_forward_hooks\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mvalues\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    493\u001b[0m             \u001b[0mhook_result\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mhook\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0minput\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mresult\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/opt/conda/lib/python3.6/site-packages/torchvision-0.2.1-py3.6.egg/torchvision/models/densenet.py\u001b[0m in \u001b[0;36mforward\u001b[0;34m(self, x)\u001b[0m\n\u001b[1;32m    139\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    140\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mforward\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mx\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 141\u001b[0;31m         \u001b[0mnew_features\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0msuper\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0m_DenseLayer\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mforward\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    142\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdrop_rate\u001b[0m \u001b[0;34m>\u001b[0m \u001b[0;36m0\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    143\u001b[0m             \u001b[0mnew_features\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mF\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdropout\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mnew_features\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mp\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdrop_rate\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtraining\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtraining\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/opt/conda/lib/python3.6/site-packages/torch/nn/modules/container.py\u001b[0m in \u001b[0;36mforward\u001b[0;34m(self, input)\u001b[0m\n\u001b[1;32m     89\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mforward\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0minput\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     90\u001b[0m         \u001b[0;32mfor\u001b[0m \u001b[0mmodule\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_modules\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mvalues\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 91\u001b[0;31m             \u001b[0minput\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mmodule\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0minput\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     92\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0minput\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     93\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/opt/conda/lib/python3.6/site-packages/torch/nn/modules/module.py\u001b[0m in \u001b[0;36m__call__\u001b[0;34m(self, *input, **kwargs)\u001b[0m\n\u001b[1;32m    489\u001b[0m             \u001b[0mresult\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_slow_forward\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0minput\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    490\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 491\u001b[0;31m             \u001b[0mresult\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mforward\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0minput\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    492\u001b[0m         \u001b[0;32mfor\u001b[0m \u001b[0mhook\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_forward_hooks\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mvalues\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    493\u001b[0m             \u001b[0mhook_result\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mhook\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0minput\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mresult\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/opt/conda/lib/python3.6/site-packages/torch/nn/modules/conv.py\u001b[0m in \u001b[0;36mforward\u001b[0;34m(self, input)\u001b[0m\n\u001b[1;32m    299\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mforward\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0minput\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    300\u001b[0m         return F.conv2d(input, self.weight, self.bias, self.stride,\n\u001b[0;32m--> 301\u001b[0;31m                         self.padding, self.dilation, self.groups)\n\u001b[0m\u001b[1;32m    302\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    303\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mKeyboardInterrupt\u001b[0m: "
     ]
    }
   ],
   "source": [
    "epochs = 5\n",
    "steps = 0\n",
    "device = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\n",
    "model = model.to(device)\n",
    "\n",
    "from workspace_utils import active_session\n",
    "\n",
    "with active_session():\n",
    "    \n",
    "\n",
    "    for ii in range(epochs): \n",
    "        for images, labels in trainloader:\n",
    "            steps += 1\n",
    "            train_loss = 0\n",
    "        \n",
    "            #Move images and labels to the gpu\n",
    "            images, labels = images.to(device), labels.to(device)\n",
    "        \n",
    "            #Zero our gradients\n",
    "            optimizer.zero_grad()\n",
    "        \n",
    "            #Forward pass\n",
    "            logprob = model.forward(images)\n",
    "            loss = criterion(logprob, labels)\n",
    "        \n",
    "            #Backprop\n",
    "            loss.backward()\n",
    "            optimizer.step()\n",
    "        \n",
    "            train_loss += loss.item()\n",
    "        \n",
    "            #VALIDATION TIME\n",
    "        else:\n",
    "            valid_loss = 0\n",
    "            accuracy = 0\n",
    "        \n",
    "            model.eval()\n",
    "            #The model has to be in evaluation mode now\n",
    "       \n",
    "            with torch.no_grad():\n",
    "            \n",
    "                for images, labels in validloader:\n",
    "                    images, labels = images.to(device), labels.to(device)\n",
    "                    logprob = model.forward(images)\n",
    "                \n",
    "                    loss = criterion(logprob, labels)\n",
    "                    valid_loss += loss.item()\n",
    "                \n",
    "                    #Calculate accuracy\n",
    "                    prob = torch.exp(logprob)\n",
    "                    top_prob, top_class = prob.topk(1, dim=1)\n",
    "                    comparison = top_class == labels.view(*top_class.shape)\n",
    "                    accuracy += torch.mean(comparison.type(torch.FloatTensor)).item()\n",
    "            \n",
    "            print(f\"Epoch {ii+1}/{epochs}.. \"\n",
    "                f\"Train loss: {train_loss/len(trainloader):.3f}.. \"\n",
    "                f\"Validation loss: {valid_loss/len(validloader):.3f}.. \"\n",
    "                f\"Validation accuracy: {accuracy/len(validloader):.3f}\")\n",
    "            #After validation, the model goes back into training mode\n",
    "            model.train()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Testing your network\n",
    "\n",
    "It's good practice to test your trained network on test data, images the network has never seen either in training or validation. This will give you a good estimate for the model's performance on completely new images. Run the test images through the network and measure the accuracy, the same way you did validation. You should be able to reach around 70% accuracy on the test set if the model has been trained well."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Test loss: 0.412.. Test accuracy: 0.888\n"
     ]
    }
   ],
   "source": [
    "# TODO: Do validation on the test set\n",
    "\n",
    "device = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\n",
    "model = model.to(device)\n",
    "\n",
    "test_loss = 0\n",
    "accuracy = 0\n",
    "\n",
    "with active_session():\n",
    "    model.eval()\n",
    "    \n",
    "    with torch.no_grad():\n",
    "        \n",
    "        for images, labels in testloader:\n",
    "                \n",
    "            images, labels = images.to(device), labels.to(device)\n",
    "            output = model.forward(images)\n",
    "            test_loss += criterion(output, labels).item()\n",
    "                \n",
    "            # Calculate accuracy\n",
    "            ps = torch.exp(output)\n",
    "            top_p, top_class = ps.topk(1, dim=1)\n",
    "            equality = top_class == labels.view(*top_class.shape)\n",
    "            accuracy += torch.mean(equality.type(torch.FloatTensor)).item()\n",
    "                \n",
    "        print(f\"Test loss: {test_loss/len(testloader):.3f}.. \"\n",
    "            f\"Test accuracy: {accuracy/len(testloader):.3f}\")\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Save the checkpoint\n",
    "\n",
    "Now that your network is trained, save the model so you can load it later for making predictions. You probably want to save other things such as the mapping of classes to indices which you get from one of the image datasets: `image_datasets['train'].class_to_idx`. You can attach this to the model as an attribute which makes inference easier later on.\n",
    "\n",
    "```model.class_to_idx = image_datasets['train'].class_to_idx```\n",
    "\n",
    "Remember that you'll want to completely rebuild the model later so you can use it for inference. Make sure to include any information you need in the checkpoint. If you want to load the model and keep training, you'll want to save the number of epochs as well as the optimizer state, `optimizer.state_dict`. You'll likely want to use this trained model in the next part of the project, so best to save it now."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "# TODO: Save the checkpoint \n",
    "model.class_to_idx = train_data.class_to_idx\n",
    "\n",
    "state = {\n",
    "    'arch': 'densenet121',\n",
    "    'classifier': model.classifier,\n",
    "    'state_dict': model.state_dict(),\n",
    "    'optimizer': optimizer,\n",
    "    'optimizer_dict' : optimizer.state_dict(),\n",
    "    'class_to_idx' : model.class_to_idx\n",
    "    }\n",
    "\n",
    "torch.save(state, 'checkpoint.pth')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Loading the checkpoint\n",
    "\n",
    "At this point it's good to write a function that can load a checkpoint and rebuild the model. That way you can come back to this project and keep working on it without having to retrain the network."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/conda/lib/python3.6/site-packages/torchvision-0.2.1-py3.6.egg/torchvision/models/densenet.py:212: UserWarning: nn.init.kaiming_normal is now deprecated in favor of nn.init.kaiming_normal_.\n",
      "  nn.init.kaiming_normal(m.weight.data)\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "DenseNet(\n",
       "  (features): Sequential(\n",
       "    (conv0): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)\n",
       "    (norm0): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "    (relu0): ReLU(inplace)\n",
       "    (pool0): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)\n",
       "    (denseblock1): _DenseBlock(\n",
       "      (denselayer1): _DenseLayer(\n",
       "        (norm1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu1): ReLU(inplace)\n",
       "        (conv1): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu2): ReLU(inplace)\n",
       "        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
       "      )\n",
       "      (denselayer2): _DenseLayer(\n",
       "        (norm1): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu1): ReLU(inplace)\n",
       "        (conv1): Conv2d(96, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu2): ReLU(inplace)\n",
       "        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
       "      )\n",
       "      (denselayer3): _DenseLayer(\n",
       "        (norm1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu1): ReLU(inplace)\n",
       "        (conv1): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu2): ReLU(inplace)\n",
       "        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
       "      )\n",
       "      (denselayer4): _DenseLayer(\n",
       "        (norm1): BatchNorm2d(160, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu1): ReLU(inplace)\n",
       "        (conv1): Conv2d(160, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu2): ReLU(inplace)\n",
       "        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
       "      )\n",
       "      (denselayer5): _DenseLayer(\n",
       "        (norm1): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu1): ReLU(inplace)\n",
       "        (conv1): Conv2d(192, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu2): ReLU(inplace)\n",
       "        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
       "      )\n",
       "      (denselayer6): _DenseLayer(\n",
       "        (norm1): BatchNorm2d(224, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu1): ReLU(inplace)\n",
       "        (conv1): Conv2d(224, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu2): ReLU(inplace)\n",
       "        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
       "      )\n",
       "    )\n",
       "    (transition1): _Transition(\n",
       "      (norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "      (relu): ReLU(inplace)\n",
       "      (conv): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "      (pool): AvgPool2d(kernel_size=2, stride=2, padding=0)\n",
       "    )\n",
       "    (denseblock2): _DenseBlock(\n",
       "      (denselayer1): _DenseLayer(\n",
       "        (norm1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu1): ReLU(inplace)\n",
       "        (conv1): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu2): ReLU(inplace)\n",
       "        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
       "      )\n",
       "      (denselayer2): _DenseLayer(\n",
       "        (norm1): BatchNorm2d(160, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu1): ReLU(inplace)\n",
       "        (conv1): Conv2d(160, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu2): ReLU(inplace)\n",
       "        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
       "      )\n",
       "      (denselayer3): _DenseLayer(\n",
       "        (norm1): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu1): ReLU(inplace)\n",
       "        (conv1): Conv2d(192, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu2): ReLU(inplace)\n",
       "        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
       "      )\n",
       "      (denselayer4): _DenseLayer(\n",
       "        (norm1): BatchNorm2d(224, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu1): ReLU(inplace)\n",
       "        (conv1): Conv2d(224, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu2): ReLU(inplace)\n",
       "        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
       "      )\n",
       "      (denselayer5): _DenseLayer(\n",
       "        (norm1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu1): ReLU(inplace)\n",
       "        (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu2): ReLU(inplace)\n",
       "        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
       "      )\n",
       "      (denselayer6): _DenseLayer(\n",
       "        (norm1): BatchNorm2d(288, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu1): ReLU(inplace)\n",
       "        (conv1): Conv2d(288, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu2): ReLU(inplace)\n",
       "        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
       "      )\n",
       "      (denselayer7): _DenseLayer(\n",
       "        (norm1): BatchNorm2d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu1): ReLU(inplace)\n",
       "        (conv1): Conv2d(320, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu2): ReLU(inplace)\n",
       "        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
       "      )\n",
       "      (denselayer8): _DenseLayer(\n",
       "        (norm1): BatchNorm2d(352, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu1): ReLU(inplace)\n",
       "        (conv1): Conv2d(352, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu2): ReLU(inplace)\n",
       "        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
       "      )\n",
       "      (denselayer9): _DenseLayer(\n",
       "        (norm1): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu1): ReLU(inplace)\n",
       "        (conv1): Conv2d(384, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu2): ReLU(inplace)\n",
       "        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
       "      )\n",
       "      (denselayer10): _DenseLayer(\n",
       "        (norm1): BatchNorm2d(416, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu1): ReLU(inplace)\n",
       "        (conv1): Conv2d(416, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu2): ReLU(inplace)\n",
       "        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
       "      )\n",
       "      (denselayer11): _DenseLayer(\n",
       "        (norm1): BatchNorm2d(448, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu1): ReLU(inplace)\n",
       "        (conv1): Conv2d(448, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu2): ReLU(inplace)\n",
       "        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
       "      )\n",
       "      (denselayer12): _DenseLayer(\n",
       "        (norm1): BatchNorm2d(480, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu1): ReLU(inplace)\n",
       "        (conv1): Conv2d(480, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu2): ReLU(inplace)\n",
       "        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
       "      )\n",
       "    )\n",
       "    (transition2): _Transition(\n",
       "      (norm): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "      (relu): ReLU(inplace)\n",
       "      (conv): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "      (pool): AvgPool2d(kernel_size=2, stride=2, padding=0)\n",
       "    )\n",
       "    (denseblock3): _DenseBlock(\n",
       "      (denselayer1): _DenseLayer(\n",
       "        (norm1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu1): ReLU(inplace)\n",
       "        (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu2): ReLU(inplace)\n",
       "        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
       "      )\n",
       "      (denselayer2): _DenseLayer(\n",
       "        (norm1): BatchNorm2d(288, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu1): ReLU(inplace)\n",
       "        (conv1): Conv2d(288, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu2): ReLU(inplace)\n",
       "        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
       "      )\n",
       "      (denselayer3): _DenseLayer(\n",
       "        (norm1): BatchNorm2d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu1): ReLU(inplace)\n",
       "        (conv1): Conv2d(320, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu2): ReLU(inplace)\n",
       "        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
       "      )\n",
       "      (denselayer4): _DenseLayer(\n",
       "        (norm1): BatchNorm2d(352, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu1): ReLU(inplace)\n",
       "        (conv1): Conv2d(352, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu2): ReLU(inplace)\n",
       "        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
       "      )\n",
       "      (denselayer5): _DenseLayer(\n",
       "        (norm1): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu1): ReLU(inplace)\n",
       "        (conv1): Conv2d(384, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu2): ReLU(inplace)\n",
       "        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
       "      )\n",
       "      (denselayer6): _DenseLayer(\n",
       "        (norm1): BatchNorm2d(416, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu1): ReLU(inplace)\n",
       "        (conv1): Conv2d(416, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu2): ReLU(inplace)\n",
       "        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
       "      )\n",
       "      (denselayer7): _DenseLayer(\n",
       "        (norm1): BatchNorm2d(448, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu1): ReLU(inplace)\n",
       "        (conv1): Conv2d(448, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu2): ReLU(inplace)\n",
       "        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
       "      )\n",
       "      (denselayer8): _DenseLayer(\n",
       "        (norm1): BatchNorm2d(480, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu1): ReLU(inplace)\n",
       "        (conv1): Conv2d(480, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu2): ReLU(inplace)\n",
       "        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
       "      )\n",
       "      (denselayer9): _DenseLayer(\n",
       "        (norm1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu1): ReLU(inplace)\n",
       "        (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu2): ReLU(inplace)\n",
       "        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
       "      )\n",
       "      (denselayer10): _DenseLayer(\n",
       "        (norm1): BatchNorm2d(544, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu1): ReLU(inplace)\n",
       "        (conv1): Conv2d(544, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu2): ReLU(inplace)\n",
       "        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
       "      )\n",
       "      (denselayer11): _DenseLayer(\n",
       "        (norm1): BatchNorm2d(576, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu1): ReLU(inplace)\n",
       "        (conv1): Conv2d(576, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu2): ReLU(inplace)\n",
       "        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
       "      )\n",
       "      (denselayer12): _DenseLayer(\n",
       "        (norm1): BatchNorm2d(608, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu1): ReLU(inplace)\n",
       "        (conv1): Conv2d(608, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu2): ReLU(inplace)\n",
       "        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
       "      )\n",
       "      (denselayer13): _DenseLayer(\n",
       "        (norm1): BatchNorm2d(640, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu1): ReLU(inplace)\n",
       "        (conv1): Conv2d(640, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu2): ReLU(inplace)\n",
       "        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
       "      )\n",
       "      (denselayer14): _DenseLayer(\n",
       "        (norm1): BatchNorm2d(672, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu1): ReLU(inplace)\n",
       "        (conv1): Conv2d(672, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu2): ReLU(inplace)\n",
       "        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
       "      )\n",
       "      (denselayer15): _DenseLayer(\n",
       "        (norm1): BatchNorm2d(704, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu1): ReLU(inplace)\n",
       "        (conv1): Conv2d(704, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu2): ReLU(inplace)\n",
       "        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
       "      )\n",
       "      (denselayer16): _DenseLayer(\n",
       "        (norm1): BatchNorm2d(736, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu1): ReLU(inplace)\n",
       "        (conv1): Conv2d(736, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu2): ReLU(inplace)\n",
       "        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
       "      )\n",
       "      (denselayer17): _DenseLayer(\n",
       "        (norm1): BatchNorm2d(768, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu1): ReLU(inplace)\n",
       "        (conv1): Conv2d(768, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu2): ReLU(inplace)\n",
       "        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
       "      )\n",
       "      (denselayer18): _DenseLayer(\n",
       "        (norm1): BatchNorm2d(800, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu1): ReLU(inplace)\n",
       "        (conv1): Conv2d(800, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu2): ReLU(inplace)\n",
       "        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
       "      )\n",
       "      (denselayer19): _DenseLayer(\n",
       "        (norm1): BatchNorm2d(832, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu1): ReLU(inplace)\n",
       "        (conv1): Conv2d(832, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu2): ReLU(inplace)\n",
       "        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
       "      )\n",
       "      (denselayer20): _DenseLayer(\n",
       "        (norm1): BatchNorm2d(864, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu1): ReLU(inplace)\n",
       "        (conv1): Conv2d(864, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu2): ReLU(inplace)\n",
       "        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
       "      )\n",
       "      (denselayer21): _DenseLayer(\n",
       "        (norm1): BatchNorm2d(896, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu1): ReLU(inplace)\n",
       "        (conv1): Conv2d(896, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu2): ReLU(inplace)\n",
       "        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
       "      )\n",
       "      (denselayer22): _DenseLayer(\n",
       "        (norm1): BatchNorm2d(928, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu1): ReLU(inplace)\n",
       "        (conv1): Conv2d(928, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu2): ReLU(inplace)\n",
       "        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
       "      )\n",
       "      (denselayer23): _DenseLayer(\n",
       "        (norm1): BatchNorm2d(960, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu1): ReLU(inplace)\n",
       "        (conv1): Conv2d(960, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu2): ReLU(inplace)\n",
       "        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
       "      )\n",
       "      (denselayer24): _DenseLayer(\n",
       "        (norm1): BatchNorm2d(992, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu1): ReLU(inplace)\n",
       "        (conv1): Conv2d(992, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu2): ReLU(inplace)\n",
       "        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
       "      )\n",
       "    )\n",
       "    (transition3): _Transition(\n",
       "      (norm): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "      (relu): ReLU(inplace)\n",
       "      (conv): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "      (pool): AvgPool2d(kernel_size=2, stride=2, padding=0)\n",
       "    )\n",
       "    (denseblock4): _DenseBlock(\n",
       "      (denselayer1): _DenseLayer(\n",
       "        (norm1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu1): ReLU(inplace)\n",
       "        (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu2): ReLU(inplace)\n",
       "        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
       "      )\n",
       "      (denselayer2): _DenseLayer(\n",
       "        (norm1): BatchNorm2d(544, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu1): ReLU(inplace)\n",
       "        (conv1): Conv2d(544, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu2): ReLU(inplace)\n",
       "        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
       "      )\n",
       "      (denselayer3): _DenseLayer(\n",
       "        (norm1): BatchNorm2d(576, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu1): ReLU(inplace)\n",
       "        (conv1): Conv2d(576, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu2): ReLU(inplace)\n",
       "        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
       "      )\n",
       "      (denselayer4): _DenseLayer(\n",
       "        (norm1): BatchNorm2d(608, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu1): ReLU(inplace)\n",
       "        (conv1): Conv2d(608, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu2): ReLU(inplace)\n",
       "        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
       "      )\n",
       "      (denselayer5): _DenseLayer(\n",
       "        (norm1): BatchNorm2d(640, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu1): ReLU(inplace)\n",
       "        (conv1): Conv2d(640, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu2): ReLU(inplace)\n",
       "        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
       "      )\n",
       "      (denselayer6): _DenseLayer(\n",
       "        (norm1): BatchNorm2d(672, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu1): ReLU(inplace)\n",
       "        (conv1): Conv2d(672, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu2): ReLU(inplace)\n",
       "        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
       "      )\n",
       "      (denselayer7): _DenseLayer(\n",
       "        (norm1): BatchNorm2d(704, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu1): ReLU(inplace)\n",
       "        (conv1): Conv2d(704, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu2): ReLU(inplace)\n",
       "        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
       "      )\n",
       "      (denselayer8): _DenseLayer(\n",
       "        (norm1): BatchNorm2d(736, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu1): ReLU(inplace)\n",
       "        (conv1): Conv2d(736, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu2): ReLU(inplace)\n",
       "        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
       "      )\n",
       "      (denselayer9): _DenseLayer(\n",
       "        (norm1): BatchNorm2d(768, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu1): ReLU(inplace)\n",
       "        (conv1): Conv2d(768, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu2): ReLU(inplace)\n",
       "        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
       "      )\n",
       "      (denselayer10): _DenseLayer(\n",
       "        (norm1): BatchNorm2d(800, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu1): ReLU(inplace)\n",
       "        (conv1): Conv2d(800, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu2): ReLU(inplace)\n",
       "        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
       "      )\n",
       "      (denselayer11): _DenseLayer(\n",
       "        (norm1): BatchNorm2d(832, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu1): ReLU(inplace)\n",
       "        (conv1): Conv2d(832, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu2): ReLU(inplace)\n",
       "        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
       "      )\n",
       "      (denselayer12): _DenseLayer(\n",
       "        (norm1): BatchNorm2d(864, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu1): ReLU(inplace)\n",
       "        (conv1): Conv2d(864, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu2): ReLU(inplace)\n",
       "        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
       "      )\n",
       "      (denselayer13): _DenseLayer(\n",
       "        (norm1): BatchNorm2d(896, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu1): ReLU(inplace)\n",
       "        (conv1): Conv2d(896, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu2): ReLU(inplace)\n",
       "        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
       "      )\n",
       "      (denselayer14): _DenseLayer(\n",
       "        (norm1): BatchNorm2d(928, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu1): ReLU(inplace)\n",
       "        (conv1): Conv2d(928, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu2): ReLU(inplace)\n",
       "        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
       "      )\n",
       "      (denselayer15): _DenseLayer(\n",
       "        (norm1): BatchNorm2d(960, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu1): ReLU(inplace)\n",
       "        (conv1): Conv2d(960, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu2): ReLU(inplace)\n",
       "        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
       "      )\n",
       "      (denselayer16): _DenseLayer(\n",
       "        (norm1): BatchNorm2d(992, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu1): ReLU(inplace)\n",
       "        (conv1): Conv2d(992, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu2): ReLU(inplace)\n",
       "        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
       "      )\n",
       "    )\n",
       "    (norm5): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "  )\n",
       "  (classifier): Sequential(\n",
       "    (fc1): Linear(in_features=1024, out_features=512, bias=True)\n",
       "    (relu1): ReLU()\n",
       "    (dropout1): Dropout(p=0.2)\n",
       "    (fc2): Linear(in_features=512, out_features=256, bias=True)\n",
       "    (relu2): ReLU()\n",
       "    (dropout2): Dropout(p=0.2)\n",
       "    (fc3): Linear(in_features=256, out_features=102, bias=True)\n",
       "    (output): LogSoftmax()\n",
       "  )\n",
       ")"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# TODO: Write a function that loads a checkpoint and rebuilds the model\n",
    "\n",
    "def load_checkpoint(filepath):\n",
    "    model = models.densenet121(pretrained=True)\n",
    "    checkpoint = torch.load(filepath, map_location=('cuda' if (torch.cuda.is_available()) else 'cpu'))\n",
    "    model.arch = checkpoint['arch']\n",
    "    model.class_to_idx = checkpoint['class_to_idx']\n",
    "    model.classifier = checkpoint['classifier']\n",
    "    model.load_state_dict(checkpoint['state_dict'])\n",
    "    optimizer.load_state_dict(checkpoint['optimizer_dict'])\n",
    "    \n",
    "    for param in model.parameters():\n",
    "        param.requires_grad = False\n",
    "        \n",
    "    return model\n",
    "\n",
    "model = load_checkpoint('checkpoint.pth')\n",
    "model"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Inference for classification\n",
    "\n",
    "Now you'll write a function to use a trained network for inference. That is, you'll pass an image into the network and predict the class of the flower in the image. Write a function called `predict` that takes an image and a model, then returns the top $K$ most likely classes along with the probabilities. It should look like \n",
    "\n",
    "```python\n",
    "probs, classes = predict(image_path, model)\n",
    "print(probs)\n",
    "print(classes)\n",
    "> [ 0.01558163  0.01541934  0.01452626  0.01443549  0.01407339]\n",
    "> ['70', '3', '45', '62', '55']\n",
    "```\n",
    "\n",
    "First you'll need to handle processing the input image such that it can be used in your network. \n",
    "\n",
    "## Image Preprocessing\n",
    "\n",
    "You'll want to use `PIL` to load the image ([documentation](https://pillow.readthedocs.io/en/latest/reference/Image.html)). It's best to write a function that preprocesses the image so it can be used as input for the model. This function should process the images in the same manner used for training. \n",
    "\n",
    "First, resize the images where the shortest side is 256 pixels, keeping the aspect ratio. This can be done with the [`thumbnail`](http://pillow.readthedocs.io/en/3.1.x/reference/Image.html#PIL.Image.Image.thumbnail) or [`resize`](http://pillow.readthedocs.io/en/3.1.x/reference/Image.html#PIL.Image.Image.thumbnail) methods. Then you'll need to crop out the center 224x224 portion of the image.\n",
    "\n",
    "Color channels of images are typically encoded as integers 0-255, but the model expected floats 0-1. You'll need to convert the values. It's easiest with a Numpy array, which you can get from a PIL image like so `np_image = np.array(pil_image)`.\n",
    "\n",
    "As before, the network expects the images to be normalized in a specific way. For the means, it's `[0.485, 0.456, 0.406]` and for the standard deviations `[0.229, 0.224, 0.225]`. You'll want to subtract the means from each color channel, then divide by the standard deviation. \n",
    "\n",
    "And finally, PyTorch expects the color channel to be the first dimension but it's the third dimension in the PIL image and Numpy array. You can reorder dimensions using [`ndarray.transpose`](https://docs.scipy.org/doc/numpy-1.13.0/reference/generated/numpy.ndarray.transpose.html). The color channel needs to be first and retain the order of the other two dimensions."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [],
   "source": [
    "def process_image(image):\n",
    "    ''' Scales, crops, and normalizes a PIL image for a PyTorch model,\n",
    "        returns an Numpy array\n",
    "    '''\n",
    "    \n",
    "    # TODO: Process a PIL image for use in a PyTorch model\n",
    "    \n",
    "    img = Image.open(image)\n",
    "    \n",
    "    w = 256\n",
    "    h = 256\n",
    "    img = img.resize((w, h))\n",
    "    \n",
    "    new_w = 224\n",
    "    new_h = 224\n",
    "    \n",
    "    left = (w - new_w) / 2\n",
    "    top = (h - new_h) / 2\n",
    "    right = (w + new_w) / 2\n",
    "    bottom = (h + new_h) / 2\n",
    "    img = img.crop((left, top, right, bottom))\n",
    "\n",
    "    \n",
    "    np_img = np.array(img)/255\n",
    "    mean = [0.485, 0.456, 0.406]\n",
    "    std = [0.229, 0.224, 0.225]\n",
    "    np_img = (np_img - mean) / std\n",
    "    image = np_img.transpose(2, 0, 1)\n",
    "        \n",
    "    \n",
    "    return image\n",
    "\n",
    "image = test_dir + '/1/image_06760.jpg'\n",
    "image = process_image(image)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "To check your work, the function below converts a PyTorch tensor and displays it in the notebook. If your `process_image` function works, running the output through this function should return the original image (except for the cropped out portions)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x7fc6e4a4d2b0>"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7fc68a954748>"
      ]
     },
     "metadata": {
      "image/png": {
       "height": 251,
       "width": 259
      },
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "def imshow(image, ax=None, title=None):\n",
    "    \"\"\"Imshow for Tensor.\"\"\"\n",
    "    if ax is None:\n",
    "        fig, ax = plt.subplots()\n",
    "    \n",
    "    # PyTorch tensors assume the color channel is the first dimension\n",
    "    # but matplotlib assumes is the third dimension\n",
    "    image = image.transpose((1, 2, 0))\n",
    "    \n",
    "    # Undo preprocessing\n",
    "    mean = np.array([0.485, 0.456, 0.406])\n",
    "    std = np.array([0.229, 0.224, 0.225])\n",
    "    image = std * image + mean\n",
    "    \n",
    "    # Image needs to be clipped between 0 and 1 or it looks like noise when displayed\n",
    "    image = np.clip(image, 0, 1)\n",
    "    \n",
    "    ax.imshow(image)\n",
    "    \n",
    "    return ax\n",
    "\n",
    "imshow(image)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Class Prediction\n",
    "\n",
    "Once you can get images in the correct format, it's time to write a function for making predictions with your model. A common practice is to predict the top 5 or so (usually called top-$K$) most probable classes. You'll want to calculate the class probabilities then find the $K$ largest values.\n",
    "\n",
    "To get the top $K$ largest values in a tensor use [`x.topk(k)`](http://pytorch.org/docs/master/torch.html#torch.topk). This method returns both the highest `k` probabilities and the indices of those probabilities corresponding to the classes. You need to convert from these indices to the actual class labels using `class_to_idx` which hopefully you added to the model or from an `ImageFolder` you used to load the data ([see here](#Save-the-checkpoint)). Make sure to invert the dictionary so you get a mapping from index to class as well.\n",
    "\n",
    "Again, this method should take a path to an image and a model checkpoint, then return the probabilities and classes.\n",
    "\n",
    "```python\n",
    "probs, classes = predict(image_path, model)\n",
    "print(probs)\n",
    "print(classes)\n",
    "> [ 0.01558163  0.01541934  0.01452626  0.01443549  0.01407339]\n",
    "> ['70', '3', '45', '62', '55']\n",
    "```"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [],
   "source": [
    "def predict(image_path, model, topk=5):\n",
    "    ''' Predict the class (or classes) of an image using a trained deep learning model.\n",
    "    '''\n",
    "    \n",
    "    # TODO: Implement the code to predict the class from an image file\n",
    "    \n",
    "    device = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\n",
    "    model.to(device)\n",
    "    \n",
    "    model.eval()\n",
    "     \n",
    "    image = process_image(image_path)\n",
    "    print(image.shape)\n",
    "    image = torch.from_numpy(image).type(torch.FloatTensor)\n",
    "    image = image.unsqueeze_(0)\n",
    "      \n",
    "    log_probs = model.forward(image)\n",
    "    \n",
    "    probs = torch.exp(log_probs)\n",
    "    p, c = probs.topk(topk, dim=1)\n",
    "    \n",
    "    \n",
    "    return p, c"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(3, 224, 224)\n",
      "tensor([[ 0.9620,  0.0129,  0.0082,  0.0050,  0.0041]])\n",
      "tensor([[ 54,  57,  30,  85,  38]])\n"
     ]
    }
   ],
   "source": [
    "probs, classes = predict('flowers/test/56/image_02779.jpg', model)   \n",
    "print(probs)\n",
    "print(classes)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Sanity Checking\n",
    "\n",
    "Now that you can use a trained model for predictions, check to make sure it makes sense. Even if the testing accuracy is high, it's always good to check that there aren't obvious bugs. Use `matplotlib` to plot the probabilities for the top 5 classes as a bar graph, along with the input image. It should look like this:\n",
    "\n",
    "<img src='assets/inference_example.png' width=300px>\n",
    "\n",
    "You can convert from the class integer encoding to actual flower names with the `cat_to_name.json` file (should have been loaded earlier in the notebook). To show a PyTorch tensor as an image, use the `imshow` function defined above."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(3, 224, 224)\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7fc68ae49eb8>"
      ]
     },
     "metadata": {
      "image/png": {
       "height": 250,
       "width": 447
      },
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x7fc68aec55c0>"
      ]
     },
     "execution_count": 50,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7fc68af04518>"
      ]
     },
     "metadata": {
      "image/png": {
       "height": 251,
       "width": 259
      },
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# TODO: Display an image along with the top 5 classes\n",
    "\n",
    "# Get the probabilities and indices from passing the image through the model\n",
    "image_path = test_dir + '/56/image_02779.jpg'\n",
    "image = process_image(image_path)\n",
    "top_ps, top_class = predict(image_path, model, 5)\n",
    "\n",
    "idx_to_class = {v:k for k,v in model.class_to_idx.items()}\n",
    "classes = [idx_to_class[idx] for idx in classes[0].tolist()]\n",
    "\n",
    "c = []\n",
    "for x in classes:\n",
    "    \n",
    "    c.append(cat_to_name[x])\n",
    "\n",
    "y_pos = np.arange(len(probs[0]))\n",
    "plt.barh(y=y_pos, width=probs[0], align='center');\n",
    "plt.yticks(y_pos, c)\n",
    "plt.show()\n",
    "imshow(image)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
